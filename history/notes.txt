History prints out every command, even invalid commands typed to the terminal.


From man pages:
History Storage
       The history list is an array of history entries.  A history entry is declared as follows:

       typedef void * histdata_t;

       typedef struct _hist_entry {
         char *line;
         char *timestamp;
         histdata_t data;
       } HIST_ENTRY;

       The history list itself might therefore be declared as

       HIST_ENTRY ** the_history_list;

       The state of the History library is encapsulated into a single structure:

       /*
        * A structure used to pass around the current state of the history.
        */
       typedef struct _hist_state {
         HIST_ENTRY **entries; /* Pointer to the entries themselves. */
         int offset;           /* The location pointer within this array. */
         int length;           /* Number of elements within this array. */
         int size;             /* Number of slots allocated to this array. */
         int flags;
       } HISTORY_STATE;

       NOTES:

       - history library:

       - history list:

       - history expansion: 

       - event designator: a reference to a command line entry in the history list. Unless the reference
        is absolute (?), events are relative to the current position in the history list.

        An absolute reference is where 0 is the beginning of time-eth command, and we type the absolute 
        number of the history entry.

        - word designator: a symbol used to select desired words.
         ':' separates event specification from word designator. Not needed if ^, $, *, -, %.

The history library seems to be a file that contains:
    1) a history list,
    2) arbitrary data associated with each history line (what is a history line? What is it called?)